< 2018 2학기 최지웅 교수님 알고리즘 기말고사 > - 총 100점

1번[손계산문제] TSP를 Dynamic Programming으로 풀 때, D배열과 P배열 안에 들어갈 적절한 값 구하기 - 12점
 (입력 값 즉 2차원 배열(W[][])이 제시됨)


2번[손계산문제] Prim의 알고리즘을 이용하여 어떤 비방향 그래프가 제시되었을 때 MST 구하기 - 12점
 (답의 경우 solution set에 추가하는 노드를 순서대로 작성하였음, 노드의 경우 (1,3) 이런 식으로 작성하였음)


3번[과제손계산문제] Kruskal의 알고리즘을 이용하여 어떤 비방향 그래프가 제시되었을 때 MST 구하기 - 12점
 (답의 경우 solution set에 추가하는 노드를 순서대로 작성하였음, 노드의 경우 (1,3) 이런 식으로 작성하였음)


4번[과제손계산문제] Dijkstra의 알고리즘을 이용하여 어떤 방향 그래프가 제시되었을 때, v1에서 각 노드로 향하는 최단거리를 구하는 과정을 작성하기 - 14점
 (답의 경우 solution set에 추가하는 노드를 순서대로 작성하였음, 노드의 경우 (1,3) 이런 식으로 작성하였음)


5번[손계산문제] TSP를 Branch-and-Bound로 풀 때, 상태 공간 트리를 작성하고 각 노드에서 bound 또는 length 계산하기 - 12점
 (유망하지 않는 노드는 X 표시하고 그 자식은 그리지 않음)
 (bound의 경우 잎 노드가 아니고 유망한 노드일 경우 작성) - bound 계산법 알고 있어야 함
 (length의 경우 잎 노드일 때 작성) - length 계산법 알고 있어야 함
 (그 외에 maxprofit에 대해 알고 있어야 함..!)


6번[과제손계산문제] Backtracking 기법으로 Sum-of-Subset 문제를 풀기 - 15점
-> 합이 6이 나오게 하는 경우 구하기, 제시된 정수는 4,2,6
 (1) w_1, w_2, w_3을 정하기 -> 이 때 오름차순으로 정렬하므로 w_1 = 2, w_2 = 4, w_3 = 6

    < 상태 공간 트리가 제시됨 >

 (2) 상태 공간 트리에, total을 구하고 빈칸 채우기 
 (3) solution을 출력하는 노드 번호 쓰기
 (4) non-promising이 결정되는 노드 번호 쓰기


7번[과제손계산문제] Backtracking 기법으로 Graph Coloring 문제를 풀기(색깔 3개) - 상태 공간 트리를 작성하되 
" 맨 처음 solution이 나올 때까지 방문한 노드만 작성 " - 11점
 (전략 : Backtracking 기법은 깊이 우선 탐색이므로, 쓸데없이 1 2 3 이런 식으로 전부 노드를 그리지 말고 탐사하는 노드만 그린다. 또 유망하지 않은 노드는 X를 치고 자식을 탐색하지 않는다.)


8번 [이번 시험 제일 어려웠던 문제 - 코드가 제시되고 그 코드를 분석/변형해야 하는 문제]

 - Kruskal 알고리즘에서, 서로소 집합의 데이터 구조를 사용하였는데 그 코드가 제시됨. - 7점
 이 때, u 에서 루트까지 올라가는 경로 상에 있는 모든 노드들의 부모 노드를 루트 노드로 하려고 한다.
 이에 알맞게 코드를 수정하시오 (find 함수를 수정해야 하며 코드의 길이는 3줄을 넘을 수 없음) 

< 다음과 똑같은 문제가 나왔음. 이는 '경로압축' 문제이며 수업시간에 잠깐 다룬 적이 있음(말로만...) >
   - 책 p 612에 1줄로 경로압축이라는 기술을 사용하면 시간복잡도가 더 좋아진다고 함
< 꽤나 난이도가 높은 응용문제였음... 밑의 링크를 참조하기를 바람! >

int find(int u) {

	 if (u == parent[u]) 
		return u;		    // return 다음 값 쓰는 것 4점 

	return parent[u] = find(parent[u]); // 이 문장 전체를 쓰는 것 2점

 } 

< 참고 링크 - 경로압축 >
http://bowbowbow.tistory.com/26 -> 이 사이트에서 코드와 그림이 그대로 문제에 나옴..!
https://www.crocus.co.kr/683


9번 0-1 KnapSack Problem을 Dynamic Programming으로 풀 때, 점화식을 작성하기 - (1빈칸당 1점) 총 5점
 (관련 : Chap 4. Greedy Approach - p56 점화식 (빈칸 5개로 나옴, 범위 역시 알고 있어야 함)

- 총평
  1) 손계산 문제만 다 맞아도 88점
  2) 과제 문제만 다 맞아도 50점이 넘음
  3) 쉬운 문제의 배점(1번 ~ 7번)이 상당히 높았고, 어려운 문제(8번)의 배점이 상당히 낮음(역배점)
  4) 기말고사는 중간고사와 달리 손계산의 비중이 상당히 높으니 연습해서 숙달이 필요함
      - 그러면 75분 중 30분이 남고(Me..!), 안 그러면 시간이 부족함....